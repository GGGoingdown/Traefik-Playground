kind: pipeline
type: docker
name: unit_test

workspace:
  path: /app


steps:
  - name: waiton cache
    image: akhenakh/drone-waiton:1.0
    settings:
      globaltimeout: 60s
      urls:
        - tcp://cache:6379

  - name: waiton db
    image: akhenakh/drone-waiton:1.0
    settings:
      globaltimeout: 60s
      urls:
        - tcp://db:5432

  - name: export requirements file
    image: python:3.9-slim
    commands:
      - pip install --upgrade pip poetry
      - poetry export -f requirements.txt --output /project/requirements.txt --without-hashes --with dev
    volumes:
      - name: pythonpath
        path: /project

  - name: test
    image: python:3.9-slim
    environment:
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
      ENVIRONMENT: TEST
      MIGRATION: true
      CREATE_INIT_DATA: false
    commands:
      - export $(grep -v '^#' ./env/.drone.env | xargs)
      - pip install --upgrade pip
      - pip install --no-cache-dir --upgrade -r /project/requirements.txt
      - aerich upgrade
      - python ./tests/create_test_init_data.py
      - pytest

    volumes:
      - name: pythonpath
        path: /project


  - name: notification
    image: appleboy/drone-telegram
    when:
      status:
        - failure
        - success
    settings:
      token:
        from_secret: Telegram_gggoingdown_CI_bot_token
      to:
        from_secret: Telegram_chat_id
      message: >
        {{#success build.status}}
          Repository: {{repo.name}}
          Branch: {{commit.branch}}
          Commit message:  {{commit.message}}
          Message: Test succeeded. Good job.
          Version: {{build.number}}
        {{else}}
          Repository: {{repo.name}}
          Branch: {{commit.branch}}
          Version: {{build.number}}
          Commit message:  {{commit.message}}
          Message: Test failed. Fix me please.
          Version: {{build.number}}
        {{/success}}

services:
  - name: cache
    image: redis:6.2
    commands:
      - redis-server --requirepass redis_username

  - name: db
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test

trigger:
  branch:
    - master
    - test/*
    - feature/*

volumes:
  - name: pythonpath
    temp: {}


---
kind: pipeline
type: docker
name: build

steps:
  - name: docker
    image: plugins/docker
    settings:
      username:
        from_secret: DockerHub_username
      password:
        from_secret: DockerHub_password
      repo: gggoingdown/fastapi-cookiecutter
      build_args: ENVIRONMENT=PROD
      tags:
        - latest
        - ${DRONE_TAG}
      storage_driver: vfs

  - name: notification
    image: appleboy/drone-telegram
    when:
      status:
        - success
        - failure
    settings:
      token:
        from_secret: Telegram_gggoingdown_CI_bot_token
      to:
        from_secret: Telegram_chat_id
      message: >
        {{#success build.status}}
          Repository: {{repo.name}}
          Version: {{build.number}}
          Commit message:  {{commit.message}}
          Message: build image succeeded. Good job.
        {{else}}
          Repository: {{repo.name}}
          Version: {{build.number}}
          Commit message:  {{commit.message}}
          Message: build image failed. Fix me please.
        {{/success}}

trigger:
  event:
    - tag
